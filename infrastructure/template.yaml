AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
# More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
# Find out more about other implicit resources you can reference within SAM
# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

Globals:
  Function:
    Timeout: 3

Parameters:
  EnvironmentName:
    Type: String
    AllowedValues:
      - local
      - dev

Resources:
  DocumentsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: documents-table-dev

  HelloWorldLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/hello-world
      Handler: hello-world.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          WEB_CLIENT_URL: http://localhost:8080

      Events:
        HelloWorldEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/hello
            Method: get

  AuthenticateLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/authenticate
      Handler: authenticate.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          LOCAL_WEB_CLIENT_URL: http://localhost:8080
          DEV_WEB_CLIENT_URL: !GetAtt WebClientBucket.WebsiteURL

      Events:
        RootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/authenticate
            Method: get

  LoginLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/login
      Handler: login.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          LOCAL_WEB_CLIENT_URL: http://localhost:8080
          DEV_WEB_CLIENT_URL: !GetAtt WebClientBucket.WebsiteURL

      Events:
        RootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/login
            Method: post

        OptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/login
            Method: options

  LogoutLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/logout
      Handler: logout.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          LOCAL_WEB_CLIENT_URL: http://localhost:8080
          DEV_WEB_CLIENT_URL: !GetAtt WebClientBucket.WebsiteURL

      Events:
        RootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/logout
            Method: post

        OptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/logout
            Method: options

  GetAnamneseLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/get-anamnese
      Handler: get-anamnese.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentsTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          LOCAL_WEB_CLIENT_URL: http://localhost:8080
          DEV_WEB_CLIENT_URL: !GetAtt WebClientBucket.WebsiteURL
          DOCUMENTS_TABLE_NAME: documents-table-dev

      Events:
        RootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/anamnese
            Method: get

  SaveAnamneseLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/put-anamnese
      Handler: put-anamnese.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DocumentsTable
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          LOCAL_WEB_CLIENT_URL: http://localhost:8080
          DEV_WEB_CLIENT_URL: !GetAtt WebClientBucket.WebsiteURL
          DOCUMENTS_TABLE_NAME: documents-table-dev

      Events:
        RootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/anamnese
            Method: put

        OptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/anamnese
            Method: options

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev

  WebClientBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        # Since we're serving an SPA and the routing is client-side, the backend must always fallback to index.html.
        ErrorDocument: index.html

  WebClientBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebClientBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Principal: "*"
            Resource: !Sub "${WebClientBucket.Arn}/*"

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGateway.Stage}/"
  WebClientBucketUri:
    Description: "Web Client Bucket URI"
    Value: !Sub "s3://${WebClientBucket}"
  WebClientBucketWebsiteUrl:
    Description: "Web Client Bucket Website URL"
    Value: !GetAtt WebClientBucket.WebsiteURL
